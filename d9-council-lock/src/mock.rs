#![cfg(test)]

use super::*;
use crate as council_lock;
use sp_runtime::{
    create_runtime_str, generic,
    traits::{BadOrigin, BlakeTwo256, Dispatchable, IdentityLookup},
    BuildStorage,
};
use sp_version::RuntimeVersion;
pub type BlockNumber = u32;
pub type Balance = u128;
pub type AccountId = u64;
pub type Index = u32;
pub type hash = sp_core::H256;
use frame_support::{
    assert_err_ignore_postinfo, assert_noop, assert_ok, parameter_types,
    traits::{ConstU32, ConstU64, OnInitialize},
    PalletId,
};
type Block = frame_system::mocking::MockBlock<TestRuntime>;
pub type CouncilCall = crate::Call<TestRuntime>;

#[sp_version::runtime_version]
pub const VERSION: RuntimeVersion = RuntimeVersion {
    spec_name: create_runtime_str!("d9-test"),
    impl_name: create_runtime_str!("d-test"),
    authoring_version: 1,
    spec_version: 1,
    impl_version: 1,
    apis: RUNTIME_API_VERSIONS,
    transaction_version: 1,
    state_version: 1,
};

frame_support::construct_runtime! {
  pub enum TestRuntime {
    System: frame_system::{Pallet, Call, Config, Storage, Event<T>},
    Balances: pallet_balances::{Pallet, Call, Storage, Config<T>, Event<T>},
    CouncilLock : council_lock::{Pallet, Call, Storage, Config<T>,Event<T>},
    NodeVoting : d9_node_voting::{Pallet, Call, Storage, Config<T>, Event<T>},
    Sessions: pallet_session::{Pallet, Call, Storage, Event, Config<T>},
  }
}

impl_outer_origin! {
  pub enum Origin for Test where system = frame_system {}
//TODO - need to implement a proper Origin
}
parameter_types! {
    pub const BlockHashCount: BlockNumber = 2400;
    pub const Version: RuntimeVersion = VERSION;
    /// We allow for 2 seconds of compute with a 6 second average block time.
    pub BlockWeights: frame_system::limits::BlockWeights =
        frame_system::limits::BlockWeights::with_sensible_defaults(
            Weight::from_parts(2u64 * WEIGHT_REF_TIME_PER_SECOND, u64::MAX),
            NORMAL_DISPATCH_RATIO,
        );
    pub BlockLength: frame_system::limits::BlockLength = frame_system::limits::BlockLength
        ::max_with_normal_ratio(5 * 1024 * 1024, NORMAL_DISPATCH_RATIO);
    pub const SS58Prefix: u8 = 9;
}

impl frame_system::Config for TestRuntime {
    /// The basic call filter to use in dispatchable.
    type BaseCallFilter = frame_support::traits::Everything;
    /// Block & extrinsics weights: base values and limits.
    type BlockWeights = BlockWeights;
    /// The maximum length of a block (in bytes).
    type BlockLength = BlockLength;
    /// The identifier used to distinguish between accounts.
    type AccountId = AccountId;
    /// The aggregated dispatch type that is available for extrinsics.
    type RuntimeCall = RuntimeCall;
    /// The lookup mechanism to get account ID from whatever is passed in dispatchers.
    type Lookup = AccountIdLookup<AccountId, ()>;
    /// The index type for storing how many extrinsics an account has signed.
    type Index = Index;
    /// The index type for blocks.
    type BlockNumber = BlockNumber;
    /// The type for hashing blocks and tries.
    type Hash = Hash;
    /// The hashing algorithm used.
    type Hashing = BlakeTwo256;
    /// The header type.
    type Header = generic::Header<BlockNumber, BlakeTwo256>;
    /// The ubiquitous event type.
    type RuntimeEvent = RuntimeEvent;
    /// The ubiquitous origin type.
    type RuntimeOrigin = RuntimeOrigin;
    /// Maximum number of block number to block hash mappings to keep (oldest pruned first).
    type BlockHashCount = BlockHashCount;
    /// The weight of database operations that the runtime can invoke.
    type DbWeight = RocksDbWeight;
    /// Version of the runtime.
    type Version = Version;
    /// Converts a module to the index of the module in `construct_runtime!`.
    ///
    /// This type is being generated by `construct_runtime!`.
    type PalletInfo = PalletInfo;
    /// What to do if a new account is created.
    type OnNewAccount = ();
    /// What to do if an account is fully reaped from the system.
    type OnKilledAccount = ();
    /// The data to be stored in an account.
    type AccountData = pallet_d9_balances::AccountData<Balance>;
    /// Weight information for the extrinsics of this pallet.
    type SystemWeightInfo = ();
    /// This is used as an identifier of the chain. 42 is the generic substrate prefix.
    type SS58Prefix = SS58Prefix;
    /// The set code logic, just the default since we're not a parachain.
    type OnSetCode = ();
    type MaxConsumers = frame_support::traits::ConstU32<16>;
}

parameter_types! {
  pub const LockIdentifier:Get<[u8;8]> = *b"council/";
  pub const PalletId: PalletId = PalletId(*b"council/");
  pub const VotingCouncilSize:u32 = 27;
  pub const MinNominatorRank:u32 = 127;
  pub const AssentingVotesThreshold:u32 = 19;
  pub const DissentingVotesThreshold:u32 = 10;
  pub const NumberOfSessionsBeforeVote:u32 = 2;
}
impl Config for TestRuntime {
    type LockIdentifier = LockIdentifier;
    type Currency = Balances;
    type LockableCurrency = Balances;
    type RuntimeEvent = RuntimeEvent;
    type PalletId = PalletId;
    type VotingCouncilSize = VotingCouncilSize;
    type MinNominatorRank = MinNominatorRank;
    type AssentingVotesThreshold = AssentingVotesThreshold;
    type DissentingVotesThreshold = DissentingVotesThreshold;
    type CouncilSessionManager = NodeVoting;
}

impl pallet_balances::Config for TestRuntime {
    type RuntimeEvent = RuntimeEvent;
    type WeightInfo = pallet_d9_balances::weights::SubstrateWeight<TestRuntime>;
    type Balance = Balance;
    type DustRemoval = ();
    type ExistentialDeposit = ExistentialDeposit;
    type AccountStore = System;
    type ReserveIdentifier = ();
    type FreezeIdentifier = ();
    type MaxLocks = MaxLocks;
    type MaxHolds = MaxHolds;
    type MaxReserves = MaxReserves;
    type MaxFreezes = MaxFreezes;
    type HoldIdentifier = ();
    type ReferralManager = Self;
}

parameter_types! {
    pub const CurrencySubUnits: u128 = 1_000_000_000_000;
    pub const MaxCandidates: u32 = 288;
    pub const MaxValidatorNodes: u32 = 27;
}
impl pallet_d9_node_voting::Config for Runtime {
    type CurrencySubUnits = CurrencySubUnits;
    type Currency = Balances;
    type RuntimeEvent = RuntimeEvent;
    type MaxCandidates = MaxCandidates;
    type MaxValidatorNodes = MaxValidatorNodes;
    type NodeRewardManager = D9NodeRewards;
}
